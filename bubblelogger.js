// ==UserScript==
// @name         Bubble Logger
// @require      https://code.jquery.com/jquery-3.4.1.min.js
// @require      https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js
// @require      https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  log uncaught window (XHR.send, XHR.onerror, $.ajax...) exceptions and write them in the document as bootstrap alert html elements
// @author       Sergio Lopez
// @match        http*://*/*
// @icon         https://store-images.s-microsoft.com/image/apps.32031.13510798887630003.b4c5c861-c9de-4301-99ce-5af68bf21fd1.ba559483-bc2c-4eb9-a17e-c302009b2690?w=180&h=180&q=60
// @resource     REMOTE_CSS https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css
// @grant        GM_xmlhttpRequest
// @grant        GM_getResourceText
// @grant        GM_addStyle
// ==/UserScript==
//IIF
(function() {
    "use strict";
    const $ = window.jQuery;
    const startLoading = function() {
      const loadingLogo = $("<div class=\"loadingio-spinner-bean-eater-m1d52hd0p4d\"><div class=\"ldio-eke44p9c5d4\"><div><div></div><div></div><div></div></div><div><div></div><div></div><div></div></div></div></div><style type=\"text/css\">@keyframes ldio-eke44p9c5d4-1 {    0% { transform: rotate(0deg) }   50% { transform: rotate(-45deg) }  100% { transform: rotate(0deg) }}@keyframes ldio-eke44p9c5d4-2 {    0% { transform: rotate(180deg) }   50% { transform: rotate(225deg) }  100% { transform: rotate(180deg) }}.ldio-eke44p9c5d4 > div:nth-child(2) {  transform: translate(-15px,0);}.ldio-eke44p9c5d4 > div:nth-child(2) div {  position: absolute;  top: 40px;  left: 40px;  width: 120px;  height: 60px;  border-radius: 120px 120px 0 0;  background: #008fd4;  animation: ldio-eke44p9c5d4-1 1s linear infinite;  transform-origin: 60px 60px}.ldio-eke44p9c5d4 > div:nth-child(2) div:nth-child(2) {  animation: ldio-eke44p9c5d4-2 1s linear infinite}.ldio-eke44p9c5d4 > div:nth-child(2) div:nth-child(3) {  transform: rotate(-90deg);  animation: none;}@keyframes ldio-eke44p9c5d4-3 {    0% { transform: translate(190px,0); opacity: 0 }   20% { opacity: 1 }  100% { transform: translate(70px,0); opacity: 1 }}.ldio-eke44p9c5d4 > div:nth-child(1) {  display: block;}.ldio-eke44p9c5d4 > div:nth-child(1) div {  position: absolute;  top: 92px;  left: -8px;  width: 16px;  height: 16px;  border-radius: 50%;  background: #001f2d;  animation: ldio-eke44p9c5d4-3 1s linear infinite}.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(1) { animation-delay: -0.67s }.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(2) { animation-delay: -0.33s }.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(3) { animation-delay: 0s }.loadingio-spinner-bean-eater-m1d52hd0p4d {  width: 200px;  height: 200px;  display: inline-block;  overflow: hidden;  background: none;}.ldio-eke44p9c5d4 {  width: 100%;  height: 100%;  position: relative;  transform: translateZ(0) scale(1);  backface-visibility: hidden;  transform-origin: 0 0; /* see note above */}.ldio-eke44p9c5d4 div { box-sizing: content-box; }/* generated by https://loading.io/ */</style>")
      loadingLogo.appendTo($("body"))
    };
    startLoading();
    console.defaultError = console.error.bind(console);
    console.errors = [];
    console.defaultWarn = console.warn.bind(console);
    console.warns = [];
    console.defaultInfo = console.info.bind(console);
    console.infos = [];

    const errorsContainer = $("<div class=\"errorsContainer\">");
    errorsContainer.appendTo($("body"));

    console.error = function() {
      const loadingLogo = $("<div class=\"loadingio-spinner-bean-eater-m1d52hd0p4d\"><div class=\"ldio-eke44p9c5d4\"><div><div></div><div></div><div></div></div><div><div></div><div></div><div></div></div></div></div><style type=\"text/css\">@keyframes ldio-eke44p9c5d4-1 {    0% { transform: rotate(0deg) }   50% { transform: rotate(-45deg) }  100% { transform: rotate(0deg) }}@keyframes ldio-eke44p9c5d4-2 {    0% { transform: rotate(180deg) }   50% { transform: rotate(225deg) }  100% { transform: rotate(180deg) }}.ldio-eke44p9c5d4 > div:nth-child(2) {  transform: translate(-15px,0);}.ldio-eke44p9c5d4 > div:nth-child(2) div {  position: absolute;  top: 40px;  left: 40px;  width: 120px;  height: 60px;  border-radius: 120px 120px 0 0;  background: #008fd4;  animation: ldio-eke44p9c5d4-1 1s linear infinite;  transform-origin: 60px 60px}.ldio-eke44p9c5d4 > div:nth-child(2) div:nth-child(2) {  animation: ldio-eke44p9c5d4-2 1s linear infinite}.ldio-eke44p9c5d4 > div:nth-child(2) div:nth-child(3) {  transform: rotate(-90deg);  animation: none;}@keyframes ldio-eke44p9c5d4-3 {    0% { transform: translate(190px,0); opacity: 0 }   20% { opacity: 1 }  100% { transform: translate(70px,0); opacity: 1 }}.ldio-eke44p9c5d4 > div:nth-child(1) {  display: block;}.ldio-eke44p9c5d4 > div:nth-child(1) div {  position: absolute;  top: 92px;  left: -8px;  width: 16px;  height: 16px;  border-radius: 50%;  background: #001f2d;  animation: ldio-eke44p9c5d4-3 1s linear infinite}.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(1) { animation-delay: -0.67s }.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(2) { animation-delay: -0.33s }.ldio-eke44p9c5d4 > div:nth-child(1) div:nth-child(3) { animation-delay: 0s }.loadingio-spinner-bean-eater-m1d52hd0p4d {  width: 200px;  height: 200px;  display: inline-block;  overflow: hidden;  background: none;}.ldio-eke44p9c5d4 {  width: 100%;  height: 100%;  position: relative;  transform: translateZ(0) scale(1);  backface-visibility: hidden;  transform-origin: 0 0; /* see note above */}.ldio-eke44p9c5d4 div { box-sizing: content-box; }/* generated by https://loading.io/ */</style>")
      // set the message to display: none to fade it in later.
      const message = $("<div class=\"alert alert-danger alert-dismissible fade show\" style=\"display: none;\">");
      // a close button
      const close = $("<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">&times</button>");
      message.append(close); // adding the close button to the message
      message.append(arguments[0]); // adding the error response to the message
      // add the message element to the body, fadein, wait 3secs, fadeout
      message.prependTo(errorsContainer).fadeIn(300) //.delay(5000).fadeOut(500);
      // default &  console.error()
      console.defaultError.apply(console, arguments);
      // new & array data
      console.errors.push(Array.from(arguments));
    };

    console.warn = function() {
      // set the message to display: none to fade it in later.
      const message = $("<div class=\"alert alert-warning alert-dismissible fade show\" style=\"display: none;\">");
      // a close button
      const close = $("<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">&times</button>");
      message.append(close); // adding the close button to the message
      message.append(arguments[0]); // adding the error response to the message
      // add the message element to the body, fadein, wait 3secs, fadeout
      message.prependTo(errorsContainer).fadeIn(300) //.delay(10000).fadeOut(500); //.delay(5000).fadeOut(500);
      // default &  console.error()
      console.defaultWarn.apply(console, arguments);
      // new & array data
      console.warns.push(Array.from(arguments));
    };

    console.info = function() {
      // set the message to display: none to fade it in later.
      const message = $("<div class=\"alert alert-primary alert-dismissible fade show\" style=\"display: none;\">");
      // a close button
      const close = $("<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">&times</button>");
      message.append(close); // adding the close button to the message
      message.append(arguments[0]); // adding the error response to the message
      // add the message element to the body, fadein, wait 3secs, fadeout
      message.prependTo(errorsContainer).fadeIn(300) //.delay(10000).fadeOut(500); //.delay(5000).fadeOut(500);
      // default &  console.error()
      console.defaultInfo.apply(console, arguments);
      // new & array data
      console.infos.push(Array.from(arguments));
    };

    // Load remote CSS
    // @see https://github.com/Tampermonkey/tampermonkey/issues/835
    const myCss = GM_getResourceText("REMOTE_CSS");
    GM_addStyle(myCss);
    const errorMessageCss = ".alert {margin: 0px !important; font-size:13px !important}";
    GM_addStyle(errorMessageCss);
    const errorsContainerCss = ".errorsContainer {position: fixed !important; top: 0% !important; background-color: blue !important; width: 100% !important; z-index: 99999999 !important;}";
    GM_addStyle(errorsContainerCss);

    if ("serviceWorker" in navigator) {
      window.addEventListener("load", function() {
        if (window) {
          let _onerror = function(event, url, lineNo, columnNo, error) {
            let eventMessage = event.message ? event.message.toLowerCase() : "";
            if (!eventMessage) {
              eventMessage = event.target.id || event.target.src;
            }
            let substring = "script error";
            if (eventMessage.indexOf(substring) > -1) {
              alert("Script Error: See Browser Console for Detail");
            } else {
              let message = [
                "Message: " + eventMessage,
                "URL: " + url,
                "Line: " + lineNo,
                "Column: " + columnNo,
                "Error object: " + JSON.stringify(error)
              ].join(" - ");
              console.error(message);
            }
            //GM_notification('text', 'title', 'https://store-images.s-microsoft.com/image/apps.32031.13510798887630003.b4c5c861-c9de-4301-99ce-5af68bf21fd1.ba559483-bc2c-4eb9-a17e-c302009b2690?w=180&h=180&q=60', ()=>{console.log('click');})
            return false;
          };
          // Handle Uncaught Errors
          window.onerror = function() {
            let args = Array.prototype.slice.call(arguments);
            // logger.error(args);
            if (_onerror) {
              return _onerror.apply(window, args);
            }
            return false;
          };
        }
        window.addEventListener("unhandledrejection", function(promiseRejectionEvent) {
          console.error("window.rejectionhandled: " + (promiseRejectionEvent.reason.message || promiseRejectionEvent.error || promiseRejectionEvent));
        });
        window.addEventListener("rejectionhandled", function(promiseRejectionEvent) {
          console.error("window.rejectionhandled: " + (promiseRejectionEvent.reason.message || promiseRejectionEvent.error || promiseRejectionEvent));
        });
        window.addEventListener("error", function(errorEvent) {
          console.error("window.error: " + (event.reason.message || errorEvent.error || errorEvent));
        });
        window.addEventListener("fetch", function(event) {
          console.warn("window.fetch: " + (event.reason.message || event.error || event));
          event.respondWith(
            fetch(event.request)
          );
        });
        $.error = function(message) {
          //alert(["jQuery error", message || e.error].join());
          console.error("jQuery: " + message);
        };
        $.ajax({
          url: window.location.href,
          success: function() {
            console.info("Ajax: " + window.location.href);
          },
          error: function(error) {
            console.error("Ajax: (" + error.status + ") " + error.statusText);
          }
        });
        (function(XHR) {
          "use strict";

          let stats = [];
          let timeoutId = null;

          let open = XHR.prototype.open;
          let send = XHR.prototype.send;

          XHR.prototype.open = function(method, url, async, user, pass) {
            this._url = url;
            open.call(this, method, url, async, user, pass);
          };
          //Monkey patch send to be able to profile responses time and log it
          XHR.prototype.send = function(data) {
            let self = this;
            let start;
            let oldOnReadyStateChange;
            let url = this._url;

            function onReadyStateChange() {
              if (self.readyState === 4 /* complete */) {
                let time = new Date() - start;
                stats.push({
                  url: url,
                  duration: time
                });

                if (!timeoutId) {
                  timeoutId = window.setTimeout(function() {
                    // let xhr = new XHR();
                    // xhr.noIntercept = true;
                    // xhr.open("POST", "/clientAjaxStats", true);
                    // xhr.setRequestHeader("Content-type", "application/json");
                    // xhr.send(JSON.stringify({ stats: stats }));
                    console.info('OnreadyStateChange: ' + JSON.stringify(stats, null , 2))
                    timeoutId = null;
                    stats = [];
                  }, 2000);
                }
              }

              if (oldOnReadyStateChange) {
                oldOnReadyStateChange();
              }
            }

            if (!this.noIntercept) {
              start = new Date();

              if (this.addEventListener) {
                this.addEventListener("readystatechange", onReadyStateChange, false);
              } else {
                oldOnReadyStateChange = this.onreadystatechange;
                this.onreadystatechange = onReadyStateChange;
              }
            }

            send.call(this, data);
          };
        })(XMLHttpRequest);
        //Monkey patching window.fetch
        // const { fetch: originalFetch } = window;
        // window.fetch = async (...args) => {
        //   let [resource, config] = args;
        //   let response = await originalFetch(resource, config);
        //   if (!response.ok && response.status === 404) {
        //     // 404 error handling
        //     return Promise.reject(response);
        //   }
        //   return response;
        // };
        //Monkey patching
        // (function(send) {
        //   XMLHttpRequest.prototype.send = function(data, hole) {
        //     let _valuToAdd = $("input[name='valuToAdd']").val();
        //     this.setRequestHeader('valueName', _valuToAdd);
        //     send.call(this, data);
        //   };
        // })(XMLHttpRequest.prototype.send);
        // function banana(xhrInstance) { // Example
        //   xhrInstance.onerror = function(e){
        //     console.log('Monkey sees Monkey does: ' + xhrInstance.readyState);
        //     console.error(e)
        //   }
        //   console.log('Monkey RS: ' + xhrInstance.readyState);
        // }
        // if ('serviceWorker' in navigator) {
        //   window.addEventListener('load', function() {
        //     navigator.serviceWorker.register('http://localhost:2055/pwa/sw.monkeypatcher.js').then(function(registration) {
        //       console.log('Service worker registered with scope: ', registration.scope);
        //     }, function(err) {
        //       console.log('ServiceWorker registration failed: ', err);
        //     });
        //   });
        // }
        // Capture request before any network activity occurs:
        // let onerror = xhr.onerror;
        // let send = xhr.send;
        // xhr.send = function(data) {
        //   let rsc = this.onreadystatechange;
        //   if (rsc) {
        //     // "onreadystatechange" exists. Monkey-patch it
        //     this.onreadystatechange = function() {
        //       banana(this);
        //       return rsc.apply(this, arguments);
        //     };
        //     this.onerror = function() {
        //       banana(this);
        //       return this.onerror.apply(this, arguments);
        //     };
        //   }
        //   return send.apply(this, arguments);
        // };
        // xhr.onerror = function(data) {
        //   let rsc = this.onerror;
        //   if (rsc) {
        //     // "onreadystatechange" exists. Monkey-patch it
        //     this.onerror = function() {
        //       banana(this);
        //       return rsc.apply(this, arguments);
        //     };
        //   }
        //   return onerror.apply(this, arguments);
        // };
        // axios.interceptors.request.use(
        //   request => {
        //     if (localResponse) {
        //       throw { isLocal: true, data: { hello: 'world' } }; // <- this will stop request and trigger
        //       // response error. I want to trigger
        //       // the actual response callback
        //     } else {
        //       return request;   // <- will perform full request
        //     }
        //   },
        //   error => {
        //     return error.isLocal
        //       ? Promise.resolve(error) // <- triggers response intercept
        //       : Promise.reject(error);
        //   }
        // );
        // axios.interceptors.response.use(
        //   response => {
        //     return response;
        //   },
        //   error => {
        //     error.isLocal
        //       ? Promise.resolve(error) // <- sends as successful response
        //       : Promise.reject(error);
        //   }
        // );
        //(function (open) {
        //  XMLHttpRequest.prototype.onload = function (data) {
        //     let _valuToAdd = $("input[name='valuToAdd']").val();
        //    this.setRequestHeader('valueName', _valuToAdd);
        //   onload.call(this, data);
        //};
        // })(XMLHttpRequest.prototype.onload);
        //(function(send) {
        //    XMLHttpRequest.prototype.onerror = function(data) {
        //       //let _valuToAdd = $("input[name='valuToAdd']").val();
        //       this.setRequestHeader('monkeyPatched', true);
        //       onerror.call(this, data);
        //   };
        //})(XMLHttpRequest.prototype.onerror);
        //Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, "onerror").get.call(instance);
        //fetch('https://jsonplaceholder.typicode.com/todos/1000000')
        //   .then((response) => response.json())
        //  .then((json) => console.log(json))
        // .catch((error) => console.error(error));
        //navigator.serviceWorker.register('sw.js').then(function(registration) {
        //   console.log('Service worker registered with scope: ', registration.scope);
        //}, function(err) {
        //     console.log('ServiceWorker registration failed: ', err);
        // });
      });
    };
  }
)();
